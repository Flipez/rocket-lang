title: "String"
description:
example: |
  a = "test_string";

  b = "test" + "_string";

  is_true = "test" == "test";
  is_false = "test" == "string";

  s = "abcdef"
  puts(s[2])
  puts(s[-2])
  puts(s[:2])
  puts(s[:-2])
  puts(s[2:])
  puts(s[-2:])
  puts(s[1:-2])

  s[2] = "C"
  s[-2] = "E"
  puts(s)

  // should output
  "c"
  "e"
  "ab"
  "abcd"
  "cdef"
  "ef"
  "bcd"
  "abCdEf"

  // you can also use single quotes
  'test "string" with doublequotes'

  // and you can scape a double quote in a double quote string
  "te\"st" == 'te"st'
methods:
  count:
    description: "Counts how often a given substring occurs in the string."
    example: |
      ðŸš€ Â» "test".count("t")
      Â» 2
      ðŸš€ Â» "test".count("f")
      Â» 0
  find:
    description: "Returns the character index of a given string if found. Otherwise returns `-1`"
    example: |
      ðŸš€ Â» "test".find("e")
      Â» 1
      ðŸš€ Â» "test".find("f")
      Â» -1
  format:
    description: "Formats according to a format specifier and returns the resulting string"
    example: |
      ðŸš€ Â» "test%9d".format(1)
      Â» "test        1"
      ðŸš€ Â» "test%1.2f".format(1.5)
      Â» "test1.50"
      ðŸš€ Â» "test%s".format("test")
      Â» "testtest"
  size:
    description: "Returns the amount of characters in the string."
    example: |
      ðŸš€ Â» "test".size()
      Â» 4
  plz_i:
    description: "Interprets the string as an integer with an optional given base. The default base is `10` and switched to `8` if the string starts with `0x`."
    example: |
      ðŸš€ Â» "1234".plz_i()
      Â» 1234
      ðŸš€ Â» "1234".plz_i(8)
      Â» 668
      ðŸš€ Â» "0x1234".plz_i(8)
      Â» 668
      ðŸš€ Â» "0x1234".plz_i()
      Â» 668
      ðŸš€ Â» "0x1234".plz_i(10)
      Â» 0
  replace:
    description: "Replaces the first string with the second string in the given string."
    example: |
      ðŸš€ Â» "test".replace("t", "f")
      Â» "fesf"
  reverse:
    description: "Returns a copy of the string with all characters reversed."
    example: |
      ðŸš€ Â» "stressed".reverse()
      Â» "desserts"
  reverse!:
    description: "Replaces all the characters in a string in reverse order."
    example: |
      ðŸš€ Â» a = "stressed"
      Â» "stressed"
      ðŸš€ Â» a.reverse!()
      Â» nil
      ðŸš€ Â» a
      Â» "desserts"
  split:
    description: "Splits the string on a given seperator and returns all the chunks in an array. Default seperator is `\" \"`"
    example: |
      ðŸš€ Â» "a,b,c,d".split(",")
      Â» ["a", "b", "c", "d"]
      ðŸš€ Â» "test and another test".split()
      Â» ["test", "and", "another", "test"]
  lines:
    description: "Splits the string at newline escape sequence and return all chunks in an array. Shorthand for `string.split(\"\\n\")`."
    example: |
      ðŸš€ Â» "test\ntest2".lines()
      Â» ["test\ntest2"]
  strip:
    description: "Returns a copy of the string with all leading and trailing whitespaces removed."
    example: |
      ðŸš€ Â» " test ".strip()
      Â» "test"
  strip!:
    description: "Removes all leading and trailing whitespaces in the string."
    example: |
      ðŸš€ Â» a = " test "
      Â» " test "
      ðŸš€ Â» a.strip!()
      Â» nil
      ðŸš€ Â» a
      Â» "test"
  downcase:
    description: "Returns the string with all uppercase letters replaced with lowercase counterparts."
    example: |
      ðŸš€ Â» "TeST".downcase()
      Â» "test"
  downcase!:
    description: "Replaces all upcase characters with lowercase counterparts."
    example: |
      ðŸš€ Â» a = "TeST"
      Â» "TeST"
      ðŸš€ Â» a.downcase!()
      Â» nil
      ðŸš€ Â» a
      Â» "test"
  upcase:
    description: "Returns the string with all lowercase letters replaced with uppercase counterparts."
    example: |
      ðŸš€ Â» "test".upcase()
      Â» "TEST"
  upcase!:
    description: "Replaces all lowercase characters with upcase counterparts."
    example: |
      ðŸš€ Â» a = "test"
      Â» "test"
      ðŸš€ Â» a.upcase!()
      Â» nil
      ðŸš€ Â» a
      Â» "TEST"
